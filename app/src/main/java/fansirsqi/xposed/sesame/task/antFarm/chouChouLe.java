package fansirsqi.xposed.sesame.task.antFarm;

import org.json.JSONArray;
import org.json.JSONObject;

import fansirsqi.xposed.sesame.util.Log;
import fansirsqi.xposed.sesame.util.ResUtil;
import fansirsqi.xposed.sesame.util.ThreadUtil;

/**
 * @author Byseven
 * @date 2025/1/30
 * @apiNote
 */
public class chouChouLe {
    private static final String TAG = chouChouLe.class.getSimpleName();

    public enum TaskStatus {
        TODO, FINISHED, RECEIVED, DONATION
    }

    /* ÊäΩÊäΩ‰πê */
    void chouchoule() {
        boolean doubleCheck;
        do {
            doubleCheck = false;
            try {
                JSONObject jo = new JSONObject(AntFarmRpcCall.chouchouleListFarmTask());
                if (ResUtil.checkResultCode(TAG, jo)) {
                    JSONArray farmTaskList = jo.getJSONArray("farmTaskList");
                    for (int i = 0; i < farmTaskList.length(); i++) { // ÈÅçÂéÜ‰ªªÂä°È°π
                        JSONObject taskItem = farmTaskList.getJSONObject(i);
                        String taskStatus = taskItem.getString("taskStatus");
                        String title = taskItem.getString("title");
                        String taskId = taskItem.getString("bizKey");
                        String innerAction = taskItem.optString("innerAction");
                        int rightsTimes = taskItem.optInt("rightsTimes", 0); // Â∑≤ÊâßË°åÊ¨°Êï∞
                        int rightsTimesLimit = taskItem.optInt("rightsTimesLimit", 0); // ÊÄªÊ¨°Êï∞
                        int additionalRightsTimes = rightsTimesLimit - rightsTimes;
                        // Log.farm("ÊäΩÊäΩ‰πêüßæÔ∏è[‰ªªÂä°: " + title + "]" + " Áä∂ÊÄÅ: " + taskStatus + " Â∑≤ÊâßË°å: " + rightsTimes + "/" + rightsTimesLimit + " Ââ©‰Ωô: " + additionalRightsTimes);
                        if (TaskStatus.FINISHED.name().equals(taskStatus)) {
                            if (receiveFarmTaskAward(taskId)) {
                                doubleCheck = true;
                            }
                            if (rightsTimes < rightsTimesLimit) {
                                performFarmTask(taskId, title);
                            }
                        } else if (TaskStatus.TODO.name().equals(taskStatus)) {
                            if (performFarmTask(taskId, title)) {
                                doubleCheck = true;
                            }
                        }
                    }
                } else {
                    Log.record(TAG, "ÊäΩÊäΩ‰πê‰ªªÂä°ÂàóË°®Ëé∑ÂèñÂ§±Ë¥•: " + jo.getString("memo"));
                }
            } catch (Throwable t) {
                handleException("chouchoule err:", t);
            }
        } while (doubleCheck);
        try {
            JSONObject jo = new JSONObject(AntFarmRpcCall.enterDrawMachine());
            if (ResUtil.checkResultCode(TAG, jo)) {
                JSONObject userInfo = jo.getJSONObject("userInfo");
                JSONObject drawActivityInfo = jo.getJSONObject("drawActivityInfo");
                long endTime = drawActivityInfo.getLong("endTime");
                if (System.currentTimeMillis() > endTime) {
                    Log.record("ËØ•[" + drawActivityInfo.optString("activityId") + "]ÊäΩÂ•ñÊ¥ªÂä®Â∑≤ÁªìÊùü");
                    return;
                }
                int leftDrawTimes = userInfo.optInt("leftDrawTimes", 0);
                String activityId = drawActivityInfo.optString("activityId", "null");
                for (int ii = 0; ii < leftDrawTimes; ii++) {
                    JSONObject drawPrizeObj = new JSONObject(!activityId.equals("null") ? AntFarmRpcCall.DrawPrize(activityId) : AntFarmRpcCall.DrawPrize());
                    ThreadUtil.sleep(2000L);
                    if (drawPrizeObj.optBoolean("success")) {
                        String title = drawPrizeObj.getString("title");
                        int prizeNum = drawPrizeObj.optInt("prizeNum", 0);
                        Log.farm("ÊäΩÊäΩ‰πêüéÅ[È¢ÜÂèñ: " + title + "*" + prizeNum + "]");
                    }
                }
            } else {
                Log.record(TAG, "ÊäΩÂ•ñÊ¥ªÂä®ËøõÂÖ•Â§±Ë¥•: " + jo.getString("memo"));
            }
        } catch (Throwable t) {
            handleException("DrawPrize err:", t);
        }
    }

    /**
     * ÊâßË°åÊäΩÊäΩ‰πê‰ªªÂä°
     *
     * @param bizKey ‰∏öÂä°ID
     * @param name   ‰ªªÂä°ÂêçÁß∞
     * @return ÊòØÂê¶ÊàêÂäüÊâßË°å
     */
    private boolean performFarmTask(String bizKey, String name) {
        try {
                ThreadUtil.sleep(15000L); // ÊâÄÊúâÁ≠âÂæÖ15Áßí
                String s = AntFarmRpcCall.chouchouleDoFarmTask(bizKey);
                JSONObject jo = new JSONObject(s);
                if (jo.optBoolean("success", false)) {
                    Log.farm("ÂÆåÊàêÊäΩÊäΩ‰πêüßæÔ∏è[‰ªªÂä°: " + name + "]");
                    ThreadUtil.sleep(1000L);
                    receiveFarmTaskAward(bizKey);
                    return true;
                }
        } catch (Throwable t) {
            handleException("performFarmTask err:", t);
        }
        return false;
    }

    private boolean receiveFarmTaskAward(String taskId) {
        try {
            String s = AntFarmRpcCall.chouchouleReceiveFarmTaskAward(taskId);
            JSONObject jo = new JSONObject(s);
            return ResUtil.checkResultCode(TAG, jo);
        } catch (Throwable t) {
            handleException("receiveFarmTaskAward err:", t);
        }
        return false;
    }

    private void handleException(String message, Throwable t) {
        Log.runtime(TAG, message);
        Log.printStackTrace(TAG, t);
    }
}